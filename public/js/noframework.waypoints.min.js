/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/noframework.waypoints.min.js":
/*!***************************************************!*\
  !*** ./resources/js/noframework.waypoints.min.js ***!
  \***************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\nWaypoints - 4.0.1\nCopyright Â© 2011-2016 Caleb Troughton\nLicensed under the MIT license.\nhttps://github.com/imakewebthings/waypoints/blob/master/licenses.txt\n*/\n!function () {\n  \"use strict\";\n\n  function t(n) {\n    if (!n) throw new Error(\"No options passed to Waypoint constructor\");\n    if (!n.element) throw new Error(\"No element option passed to Waypoint constructor\");\n    if (!n.handler) throw new Error(\"No handler option passed to Waypoint constructor\");\n    this.key = \"waypoint-\" + e, this.options = t.Adapter.extend({}, t.defaults, n), this.element = this.options.element, this.adapter = new t.Adapter(this.element), this.callback = n.handler, this.axis = this.options.horizontal ? \"horizontal\" : \"vertical\", this.enabled = this.options.enabled, this.triggerPoint = null, this.group = t.Group.findOrCreate({\n      name: this.options.group,\n      axis: this.axis\n    }), this.context = t.Context.findOrCreateByElement(this.options.context), t.offsetAliases[this.options.offset] && (this.options.offset = t.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), i[this.key] = this, e += 1;\n  }\n\n  var e = 0,\n      i = {};\n  t.prototype.queueTrigger = function (t) {\n    this.group.queueTrigger(this, t);\n  }, t.prototype.trigger = function (t) {\n    this.enabled && this.callback && this.callback.apply(this, t);\n  }, t.prototype.destroy = function () {\n    this.context.remove(this), this.group.remove(this), delete i[this.key];\n  }, t.prototype.disable = function () {\n    return this.enabled = !1, this;\n  }, t.prototype.enable = function () {\n    return this.context.refresh(), this.enabled = !0, this;\n  }, t.prototype.next = function () {\n    return this.group.next(this);\n  }, t.prototype.previous = function () {\n    return this.group.previous(this);\n  }, t.invokeAll = function (t) {\n    var e = [];\n\n    for (var n in i) {\n      e.push(i[n]);\n    }\n\n    for (var o = 0, r = e.length; r > o; o++) {\n      e[o][t]();\n    }\n  }, t.destroyAll = function () {\n    t.invokeAll(\"destroy\");\n  }, t.disableAll = function () {\n    t.invokeAll(\"disable\");\n  }, t.enableAll = function () {\n    t.Context.refreshAll();\n\n    for (var e in i) {\n      i[e].enabled = !0;\n    }\n\n    return this;\n  }, t.refreshAll = function () {\n    t.Context.refreshAll();\n  }, t.viewportHeight = function () {\n    return window.innerHeight || document.documentElement.clientHeight;\n  }, t.viewportWidth = function () {\n    return document.documentElement.clientWidth;\n  }, t.adapters = [], t.defaults = {\n    context: window,\n    continuous: !0,\n    enabled: !0,\n    group: \"default\",\n    horizontal: !1,\n    offset: 0\n  }, t.offsetAliases = {\n    \"bottom-in-view\": function bottomInView() {\n      return this.context.innerHeight() - this.adapter.outerHeight();\n    },\n    \"right-in-view\": function rightInView() {\n      return this.context.innerWidth() - this.adapter.outerWidth();\n    }\n  }, window.Waypoint = t;\n}(), function () {\n  \"use strict\";\n\n  function t(t) {\n    window.setTimeout(t, 1e3 / 60);\n  }\n\n  function e(t) {\n    this.element = t, this.Adapter = o.Adapter, this.adapter = new this.Adapter(t), this.key = \"waypoint-context-\" + i, this.didScroll = !1, this.didResize = !1, this.oldScroll = {\n      x: this.adapter.scrollLeft(),\n      y: this.adapter.scrollTop()\n    }, this.waypoints = {\n      vertical: {},\n      horizontal: {}\n    }, t.waypointContextKey = this.key, n[t.waypointContextKey] = this, i += 1, o.windowContext || (o.windowContext = !0, o.windowContext = new e(window)), this.createThrottledScrollHandler(), this.createThrottledResizeHandler();\n  }\n\n  var i = 0,\n      n = {},\n      o = window.Waypoint,\n      r = window.onload;\n  e.prototype.add = function (t) {\n    var e = t.options.horizontal ? \"horizontal\" : \"vertical\";\n    this.waypoints[e][t.key] = t, this.refresh();\n  }, e.prototype.checkEmpty = function () {\n    var t = this.Adapter.isEmptyObject(this.waypoints.horizontal),\n        e = this.Adapter.isEmptyObject(this.waypoints.vertical),\n        i = this.element == this.element.window;\n    t && e && !i && (this.adapter.off(\".waypoints\"), delete n[this.key]);\n  }, e.prototype.createThrottledResizeHandler = function () {\n    function t() {\n      e.handleResize(), e.didResize = !1;\n    }\n\n    var e = this;\n    this.adapter.on(\"resize.waypoints\", function () {\n      e.didResize || (e.didResize = !0, o.requestAnimationFrame(t));\n    });\n  }, e.prototype.createThrottledScrollHandler = function () {\n    function t() {\n      e.handleScroll(), e.didScroll = !1;\n    }\n\n    var e = this;\n    this.adapter.on(\"scroll.waypoints\", function () {\n      (!e.didScroll || o.isTouch) && (e.didScroll = !0, o.requestAnimationFrame(t));\n    });\n  }, e.prototype.handleResize = function () {\n    o.Context.refreshAll();\n  }, e.prototype.handleScroll = function () {\n    var t = {},\n        e = {\n      horizontal: {\n        newScroll: this.adapter.scrollLeft(),\n        oldScroll: this.oldScroll.x,\n        forward: \"right\",\n        backward: \"left\"\n      },\n      vertical: {\n        newScroll: this.adapter.scrollTop(),\n        oldScroll: this.oldScroll.y,\n        forward: \"down\",\n        backward: \"up\"\n      }\n    };\n\n    for (var i in e) {\n      var n = e[i],\n          o = n.newScroll > n.oldScroll,\n          r = o ? n.forward : n.backward;\n\n      for (var s in this.waypoints[i]) {\n        var l = this.waypoints[i][s];\n\n        if (null !== l.triggerPoint) {\n          var a = n.oldScroll < l.triggerPoint,\n              h = n.newScroll >= l.triggerPoint,\n              p = a && h,\n              u = !a && !h;\n          (p || u) && (l.queueTrigger(r), t[l.group.id] = l.group);\n        }\n      }\n    }\n\n    for (var d in t) {\n      t[d].flushTriggers();\n    }\n\n    this.oldScroll = {\n      x: e.horizontal.newScroll,\n      y: e.vertical.newScroll\n    };\n  }, e.prototype.innerHeight = function () {\n    return this.element == this.element.window ? o.viewportHeight() : this.adapter.innerHeight();\n  }, e.prototype.remove = function (t) {\n    delete this.waypoints[t.axis][t.key], this.checkEmpty();\n  }, e.prototype.innerWidth = function () {\n    return this.element == this.element.window ? o.viewportWidth() : this.adapter.innerWidth();\n  }, e.prototype.destroy = function () {\n    var t = [];\n\n    for (var e in this.waypoints) {\n      for (var i in this.waypoints[e]) {\n        t.push(this.waypoints[e][i]);\n      }\n    }\n\n    for (var n = 0, o = t.length; o > n; n++) {\n      t[n].destroy();\n    }\n  }, e.prototype.refresh = function () {\n    var t,\n        e = this.element == this.element.window,\n        i = e ? void 0 : this.adapter.offset(),\n        n = {};\n    this.handleScroll(), t = {\n      horizontal: {\n        contextOffset: e ? 0 : i.left,\n        contextScroll: e ? 0 : this.oldScroll.x,\n        contextDimension: this.innerWidth(),\n        oldScroll: this.oldScroll.x,\n        forward: \"right\",\n        backward: \"left\",\n        offsetProp: \"left\"\n      },\n      vertical: {\n        contextOffset: e ? 0 : i.top,\n        contextScroll: e ? 0 : this.oldScroll.y,\n        contextDimension: this.innerHeight(),\n        oldScroll: this.oldScroll.y,\n        forward: \"down\",\n        backward: \"up\",\n        offsetProp: \"top\"\n      }\n    };\n\n    for (var r in t) {\n      var s = t[r];\n\n      for (var l in this.waypoints[r]) {\n        var a,\n            h,\n            p,\n            u,\n            d,\n            f = this.waypoints[r][l],\n            c = f.options.offset,\n            w = f.triggerPoint,\n            y = 0,\n            g = null == w;\n        f.element !== f.element.window && (y = f.adapter.offset()[s.offsetProp]), \"function\" == typeof c ? c = c.apply(f) : \"string\" == typeof c && (c = parseFloat(c), f.options.offset.indexOf(\"%\") > -1 && (c = Math.ceil(s.contextDimension * c / 100))), a = s.contextScroll - s.contextOffset, f.triggerPoint = Math.floor(y + a - c), h = w < s.oldScroll, p = f.triggerPoint >= s.oldScroll, u = h && p, d = !h && !p, !g && u ? (f.queueTrigger(s.backward), n[f.group.id] = f.group) : !g && d ? (f.queueTrigger(s.forward), n[f.group.id] = f.group) : g && s.oldScroll >= f.triggerPoint && (f.queueTrigger(s.forward), n[f.group.id] = f.group);\n      }\n    }\n\n    return o.requestAnimationFrame(function () {\n      for (var t in n) {\n        n[t].flushTriggers();\n      }\n    }), this;\n  }, e.findOrCreateByElement = function (t) {\n    return e.findByElement(t) || new e(t);\n  }, e.refreshAll = function () {\n    for (var t in n) {\n      n[t].refresh();\n    }\n  }, e.findByElement = function (t) {\n    return n[t.waypointContextKey];\n  }, window.onload = function () {\n    r && r(), e.refreshAll();\n  }, o.requestAnimationFrame = function (e) {\n    var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || t;\n    i.call(window, e);\n  }, o.Context = e;\n}(), function () {\n  \"use strict\";\n\n  function t(t, e) {\n    return t.triggerPoint - e.triggerPoint;\n  }\n\n  function e(t, e) {\n    return e.triggerPoint - t.triggerPoint;\n  }\n\n  function i(t) {\n    this.name = t.name, this.axis = t.axis, this.id = this.name + \"-\" + this.axis, this.waypoints = [], this.clearTriggerQueues(), n[this.axis][this.name] = this;\n  }\n\n  var n = {\n    vertical: {},\n    horizontal: {}\n  },\n      o = window.Waypoint;\n  i.prototype.add = function (t) {\n    this.waypoints.push(t);\n  }, i.prototype.clearTriggerQueues = function () {\n    this.triggerQueues = {\n      up: [],\n      down: [],\n      left: [],\n      right: []\n    };\n  }, i.prototype.flushTriggers = function () {\n    for (var i in this.triggerQueues) {\n      var n = this.triggerQueues[i],\n          o = \"up\" === i || \"left\" === i;\n      n.sort(o ? e : t);\n\n      for (var r = 0, s = n.length; s > r; r += 1) {\n        var l = n[r];\n        (l.options.continuous || r === n.length - 1) && l.trigger([i]);\n      }\n    }\n\n    this.clearTriggerQueues();\n  }, i.prototype.next = function (e) {\n    this.waypoints.sort(t);\n    var i = o.Adapter.inArray(e, this.waypoints),\n        n = i === this.waypoints.length - 1;\n    return n ? null : this.waypoints[i + 1];\n  }, i.prototype.previous = function (e) {\n    this.waypoints.sort(t);\n    var i = o.Adapter.inArray(e, this.waypoints);\n    return i ? this.waypoints[i - 1] : null;\n  }, i.prototype.queueTrigger = function (t, e) {\n    this.triggerQueues[e].push(t);\n  }, i.prototype.remove = function (t) {\n    var e = o.Adapter.inArray(t, this.waypoints);\n    e > -1 && this.waypoints.splice(e, 1);\n  }, i.prototype.first = function () {\n    return this.waypoints[0];\n  }, i.prototype.last = function () {\n    return this.waypoints[this.waypoints.length - 1];\n  }, i.findOrCreate = function (t) {\n    return n[t.axis][t.name] || new i(t);\n  }, o.Group = i;\n}(), function () {\n  \"use strict\";\n\n  function t(t) {\n    return t === t.window;\n  }\n\n  function e(e) {\n    return t(e) ? e : e.defaultView;\n  }\n\n  function i(t) {\n    this.element = t, this.handlers = {};\n  }\n\n  var n = window.Waypoint;\n  i.prototype.innerHeight = function () {\n    var e = t(this.element);\n    return e ? this.element.innerHeight : this.element.clientHeight;\n  }, i.prototype.innerWidth = function () {\n    var e = t(this.element);\n    return e ? this.element.innerWidth : this.element.clientWidth;\n  }, i.prototype.off = function (t, e) {\n    function i(t, e, i) {\n      for (var n = 0, o = e.length - 1; o > n; n++) {\n        var r = e[n];\n        i && i !== r || t.removeEventListener(r);\n      }\n    }\n\n    var n = t.split(\".\"),\n        o = n[0],\n        r = n[1],\n        s = this.element;\n    if (r && this.handlers[r] && o) i(s, this.handlers[r][o], e), this.handlers[r][o] = [];else if (o) for (var l in this.handlers) {\n      i(s, this.handlers[l][o] || [], e), this.handlers[l][o] = [];\n    } else if (r && this.handlers[r]) {\n      for (var a in this.handlers[r]) {\n        i(s, this.handlers[r][a], e);\n      }\n\n      this.handlers[r] = {};\n    }\n  }, i.prototype.offset = function () {\n    if (!this.element.ownerDocument) return null;\n    var t = this.element.ownerDocument.documentElement,\n        i = e(this.element.ownerDocument),\n        n = {\n      top: 0,\n      left: 0\n    };\n    return this.element.getBoundingClientRect && (n = this.element.getBoundingClientRect()), {\n      top: n.top + i.pageYOffset - t.clientTop,\n      left: n.left + i.pageXOffset - t.clientLeft\n    };\n  }, i.prototype.on = function (t, e) {\n    var i = t.split(\".\"),\n        n = i[0],\n        o = i[1] || \"__default\",\n        r = this.handlers[o] = this.handlers[o] || {},\n        s = r[n] = r[n] || [];\n    s.push(e), this.element.addEventListener(n, e);\n  }, i.prototype.outerHeight = function (e) {\n    var i,\n        n = this.innerHeight();\n    return e && !t(this.element) && (i = window.getComputedStyle(this.element), n += parseInt(i.marginTop, 10), n += parseInt(i.marginBottom, 10)), n;\n  }, i.prototype.outerWidth = function (e) {\n    var i,\n        n = this.innerWidth();\n    return e && !t(this.element) && (i = window.getComputedStyle(this.element), n += parseInt(i.marginLeft, 10), n += parseInt(i.marginRight, 10)), n;\n  }, i.prototype.scrollLeft = function () {\n    var t = e(this.element);\n    return t ? t.pageXOffset : this.element.scrollLeft;\n  }, i.prototype.scrollTop = function () {\n    var t = e(this.element);\n    return t ? t.pageYOffset : this.element.scrollTop;\n  }, i.extend = function () {\n    function t(t, e) {\n      if (\"object\" == _typeof(t) && \"object\" == _typeof(e)) for (var i in e) {\n        e.hasOwnProperty(i) && (t[i] = e[i]);\n      }\n      return t;\n    }\n\n    for (var e = Array.prototype.slice.call(arguments), i = 1, n = e.length; n > i; i++) {\n      t(e[0], e[i]);\n    }\n\n    return e[0];\n  }, i.inArray = function (t, e, i) {\n    return null == e ? -1 : e.indexOf(t, i);\n  }, i.isEmptyObject = function (t) {\n    for (var e in t) {\n      return !1;\n    }\n\n    return !0;\n  }, n.adapters.push({\n    name: \"noframework\",\n    Adapter: i\n  }), n.Adapter = i;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/noframework.waypoints.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/noframework.waypoints.min.js"]();
/******/ 	
/******/ })()
;